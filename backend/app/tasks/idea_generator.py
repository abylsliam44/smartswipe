"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –¥–ª—è –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
–°–æ–∑–¥–∞–µ—Ç –ø—É–ª –∏–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
"""

import json
import re
from typing import List
from openai import AsyncOpenAI
import asyncio

from ..config import get_settings
from ..schemas.idea import IdeaCreate
from ..crud.idea import bulk_create_ideas

settings = get_settings()

client = None
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π OpenAI API
if settings.OPENAI_API_KEY:
    client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY.get_secret_value())
else:
    raise RuntimeError("OpenAI API key is not configured")


def _extract_json(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON-–±–ª–æ–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI"""
    match = re.search(r"```json(.*?)```", text, re.S)
    if match:
        return match.group(1).strip()
    return text.strip()


async def _generate_ideas_for_domain(domain: str, count: int = 10) -> List[IdeaCreate]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenAI"""
    
    if not client:
        raise RuntimeError("OpenAI API key is not configured")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    domain_prompts = {
        "FinTech": "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≤–∫–ª—é—á–∞—è –±–∞–Ω–∫–∏–Ω–≥, –ø–ª–∞—Ç–µ–∂–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –±–ª–æ–∫—á–µ–π–Ω, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
        "HealthTech": "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω—É",
        "EdTech": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≤–∫–ª—é—á–∞—è –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏–µ, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, EdTech-—Ä–µ—à–µ–Ω–∏—è",
        "E-commerce": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –æ–Ω–ª–∞–π–Ω-—Ä–µ—Ç–µ–π–ª, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã, logistics-—Ä–µ—à–µ–Ω–∏—è",
        "Gaming": "–∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏, –≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ–∏–≥—Ä—ã, –º–æ–±–∏–ª—å–Ω—ã–µ –∏–≥—Ä—ã, –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é",
        "SaaS": "SaaS-—Ä–µ—à–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –±–∏–∑–Ω–µ—Å-—Å–æ—Ñ—Ç, productivity tools, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        "AI/ML": "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è AI-—Ä–µ—à–µ–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é",
        "Sustainability": "—É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≤–∫–ª—é—á–∞—è –∑–µ–ª–µ–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É, —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
    }
    
    domain_context = domain_prompts.get(domain, f"—Å—Ñ–µ—Ä—ã {domain}")
    
    system_prompt = f"""
    –¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ –ø—Ä–æ–¥—É–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ —Å—Ç–∞—Ä—Ç–∞–ø-–∏–¥–µ–∏ –≤ —Å—Ñ–µ—Ä–µ {domain_context}.
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–¥–µ—è–º:
    - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ
    - –†–µ—à–∞—é—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
    - –ò–º–µ—é—Ç —á–µ—Ç–∫—É—é —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
    - –ú–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–µ–º—ã–µ
    - –£—á–∏—Ç—ã–≤–∞—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
    
    –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON-–º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–ª—è–º–∏: title, description, tags.
    - title: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)
    - description: –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)
    - tags: 3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤
    """
    
    user_prompt = f"""
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–∞–ø-–∏–¥–µ–π –≤ —Å—Ñ–µ—Ä–µ {domain_context}.
    –ö–∞–∂–¥–∞—è –∏–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è.
    
    –í–µ—Ä–Ω–∏ —á–∏—Å—Ç—ã–π JSON-–º–∞—Å—Å–∏–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
    """
    
    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.8,
            max_tokens=2000
        )
        
        content = response.choices[0].message.content
        content = _extract_json(content)
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        ideas_raw = json.loads(content)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã IdeaCreate
        ideas = []
        for idea_data in ideas_raw:
            idea = IdeaCreate(
                title=idea_data["title"],
                description=idea_data["description"],
                tags=idea_data["tags"],
                domain=domain
            )
            ideas.append(idea)
        
        return ideas
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –¥–ª—è {domain}: {str(e)}")
        return []


async def generate_ideas_for_domains(db_session, domains: List[str], ideas_per_domain: int = 10):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π –¥–ª—è –¥–æ–º–µ–Ω–æ–≤: {domains}")
    
    all_generated_ideas = []
    
    for domain in domains:
        try:
            ideas = await _generate_ideas_for_domain(domain, ideas_per_domain)
            all_generated_ideas.extend(ideas)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI
            await asyncio.sleep(1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}: {e}")
            continue
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–¥–µ–∏ –≤ –ë–î
    if all_generated_ideas:
        try:
            created_ideas = bulk_create_ideas(db_session, all_generated_ideas)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(created_ideas)} –Ω–æ–≤—ã—Ö –∏–¥–µ–π –≤ –ë–î")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–æ–º–µ–Ω–∞–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
            domain_counts = {}
            for idea in created_ideas:
                domain_counts[idea.domain] = domain_counts.get(idea.domain, 0) + 1
            
            print("üìä –°–æ–∑–¥–∞–Ω–æ –∏–¥–µ–π –ø–æ –¥–æ–º–µ–Ω–∞–º:")
            for domain, count in domain_counts.items():
                print(f"   ‚Ä¢ {domain}: {count} –∏–¥–µ–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    else:
        print("‚ö†Ô∏è –ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∏–¥–µ–∏")
    
    print("üèÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def run_sync_generation(db_session, domains: List[str], ideas_per_domain: int = 10):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ BackgroundTasks"""
    return asyncio.run(generate_ideas_for_domains(db_session, domains, ideas_per_domain)) 