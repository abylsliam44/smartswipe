#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã SmartSwipe 2.0
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -> –≤—ã–±–æ—Ä –¥–æ–º–µ–Ω–æ–≤ -> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π -> –∏–≥—Ä–∞ -> ML
"""

import requests
import time
import random
import json

BASE_URL = "http://localhost:8000"


def test_user_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–ª–æ—É"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º SmartSwipe 2.0 - –ü–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–ª–æ—É")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
    try:
        response = requests.get(f"{BASE_URL}/")
        print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {response.json()['message']}")
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n2Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user_email = f"test_user_{int(time.time())}@example.com"
    user_password = "test_password_123"
    
    register_data = {
        "email": user_email,
        "password": user_password
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/register", json=register_data)
        if response.status_code == 201:
            user_data = response.json()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['email']}")
            print(f"   Onboarding completed: {user_data['onboarding_completed']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # 3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    print("\n3Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è...")
    login_data = {
        "username": user_email,  # OAuth2PasswordRequestForm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç username
        "password": user_password
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data["access_token"]
            headers = {"Authorization": f"Bearer {access_token}"}
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # 4. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã...")
    try:
        response = requests.get(f"{BASE_URL}/auth/available-domains")
        domains_info = response.json()
        available_domains = [d["id"] for d in domains_info["domains"]]
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {available_domains}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {e}")
        return False
    
    # 5. –í—ã–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω—ã
    print("\n5Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –¥–æ–º–µ–Ω—ã...")
    selected_domains = random.sample(available_domains, min(3, len(available_domains)))
    domain_data = {"domains": selected_domains}
    
    try:
        response = requests.post(f"{BASE_URL}/auth/domains", json=domain_data, headers=headers)
        if response.status_code == 200:
            user_data = response.json()
            print(f"‚úÖ –î–æ–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω—ã: {user_data['selected_domains']}")
            print(f"   Onboarding completed: {user_data['onboarding_completed']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–æ–≤: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–º–µ–Ω–æ–≤: {e}")
        return False
    
    # 6. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π
    print("\n6Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—É–ª–∞ –∏–¥–µ–π...")
    try:
        response = requests.post(f"{BASE_URL}/ideas/generate-pool", headers=headers)
        if response.status_code == 200:
            gen_data = response.json()
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {gen_data['message']}")
            print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π: {gen_data['estimated_ideas']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # 7. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n7Ô∏è‚É£ –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    time.sleep(10)  # –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    
    try:
        response = requests.get(f"{BASE_URL}/ideas/stats", headers=headers)
        stats = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–¥–µ–π:")
        print(f"   –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {stats['total_available']}")
        print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {stats['viewed']}")
        print(f"   –û—Å—Ç–∞–µ—Ç—Å—è: {stats['remaining']}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # 8. –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
    print("\n8Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é...")
    try:
        response = requests.get(f"{BASE_URL}/ideas/game-session?limit=5", headers=headers)
        if response.status_code == 200:
            session_data = response.json()
            ideas = session_data["ideas"]
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å {len(ideas)} –∏–¥–µ—è–º–∏")
            
            if ideas:
                print(f"   –ü—Ä–∏–º–µ—Ä –∏–¥–µ–∏: '{ideas[0]['title']}'")
                print(f"   –î–æ–º–µ–Ω: {ideas[0]['domain']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return False
    
    # 9. –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–≤–∞–π–ø—ã
    print("\n9Ô∏è‚É£ –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–≤–∞–π–ø—ã...")
    if ideas:
        for i, idea in enumerate(ideas[:3]):  # –°–≤–∞–π–ø–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–¥–µ–∏
            swipe_value = random.choice([True, False])  # –°–ª—É—á–∞–π–Ω—ã–π –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫
            swipe_data = {
                "idea_id": idea["id"],
                "swipe": swipe_value
            }
            
            try:
                response = requests.post(f"{BASE_URL}/swipes/", json=swipe_data, headers=headers)
                if response.status_code == 201:
                    action = "üëç –ª–∞–π–∫" if swipe_value else "üëé –¥–∏–∑–ª–∞–π–∫"
                    print(f"   {action} –¥–ª—è '{idea['title'][:50]}...'")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–≤–∞–π–ø–∞: {response.text}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–∞–π–ø–µ: {e}")
    
    # 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–∞–π–ø–æ–≤
    print("\nüîü –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–∞–π–ø–æ–≤...")
    try:
        response = requests.get(f"{BASE_URL}/swipes/stats", headers=headers)
        swipe_stats = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤–∞–π–ø–æ–≤:")
        print(f"   –í—Å–µ–≥–æ —Å–≤–∞–π–ø–æ–≤: {swipe_stats['total_swipes']}")
        print(f"   –õ–∞–π–∫–æ–≤: {swipe_stats['likes']}")
        print(f"   –î–∏–∑–ª–∞–π–∫–æ–≤: {swipe_stats['dislikes']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ª–∞–π–∫–æ–≤: {swipe_stats['like_ratio']}%")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–≤–∞–π–ø–æ–≤: {e}")
    
    # 11. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    try:
        response = requests.get(f"{BASE_URL}/recommendations/?limit=3", headers=headers)
        if response.status_code == 200:
            recommendations = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
            
            for rec in recommendations:
                print(f"   ‚Ä¢ '{rec['title'][:40]}...' (prob: {rec['probability']:.2f}, conf: {rec['confidence']})")
        else:
            print(f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {response.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
    
    # 12. –ü—Ä–æ–≤–µ—Ä—è–µ–º ML —Å—Ç–∞—Ç—É—Å
    print("\n1Ô∏è‚É£2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π...")
    try:
        response = requests.get(f"{BASE_URL}/ml/model-info", headers=headers)
        model_info = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π:")
        print(f"   Content-based: {'‚úÖ' if model_info['content_model_trained'] else '‚ùå'}")
        print(f"   User-based: {'‚úÖ' if model_info['user_model_trained'] else '‚ùå'}")
        print(f"   Ensemble: {'‚úÖ' if model_info['ensemble_model_trained'] else '‚ùå'}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ML: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üöÄ SmartSwipe 2.0 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    return True


def test_ml_training():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
    
    print("\n" + "=" * 60)
    print("ü§ñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ ML...")
    
    # –ù—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    
    print("‚ö†Ô∏è ML –æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Ä–µ–º–µ–Ω–∏")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ /ml/train –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–∞–π–ø–∞—Ö")


if __name__ == "__main__":
    success = test_user_flow()
    
    if success:
        test_ml_training()
    else:
        print("\n‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        exit(1) 